package intent

// Code generated - This file has been automatically generated by internal/generate/events/main.go - DO NOT EDIT.
// Warning: This file is overwritten at "go generate", instead adapt internal/constants/events.go and run go generate

import (
	"errors"
	"math/bits"

	"github.com/andersfylling/discordgateway/event"
	"github.com/andersfylling/discordgateway/internal/constants"
)

type Flag constants.Intent

func (i Flag) Size() int {
	return bits.OnesCount64(uint64(i))
}

func (i Flag) EventFlags() (flags event.Flag) {
	if i.Size() == 0 {
		return 0
	}
	if i.Size() == 1 {
		return singularIntentToEventFlags(i)
	}

	for in := Flag(1); in < All(); in = in << 1 {
		if (in & i) == 0 {
			continue
		}

		flags |= singularIntentToEventFlags(in)
	}
	return flags
}

const (
	DirectMessageReactions Flag = 13
	DirectMessageTyping    Flag = 14
	DirectMessages         Flag = 12
	GuildBans              Flag = 2
	GuildEmojis            Flag = 3
	GuildIntegrations      Flag = 4
	GuildInvites           Flag = 6
	GuildMembers           Flag = 1
	GuildMessageReactions  Flag = 10
	GuildMessageTyping     Flag = 11
	GuildMessages          Flag = 9
	GuildPresences         Flag = 8
	GuildVoiceStates       Flag = 7
	GuildWebhooks          Flag = 5
	Guilds                 Flag = 0
)

func singularIntentToEventFlags(i Flag) (flags event.Flag) {
	switch i {
	case DirectMessageReactions:
		flags = event.MessageReactionCreate | event.MessageReactionDelete | event.MessageReactionDeleteAll | event.MessageReactionDeleteEmoji
	case DirectMessageTyping:
		flags = event.TypingStart
	case DirectMessages:
		flags = event.ChannelCreate | event.MessageCreate | event.MessageUpdate | event.MessageDelete | event.ChannelPinsUpdate
	case GuildBans:
		flags = event.GuildBanCreate | event.GuildBanDelete
	case GuildEmojis:
		flags = event.GuildEmojisUpdate
	case GuildIntegrations:
		flags = event.GuildIntegrationsUpdate | event.IntegrationCreate | event.IntegrationUpdate | event.IntegrationDelete
	case GuildInvites:
		flags = event.InviteCreate | event.InviteDelete
	case GuildMembers:
		flags = event.GuildMemberCreate | event.GuildMemberUpdate | event.GuildMemberDelete | event.ThreadMembersUpdate
	case GuildMessageReactions:
		flags = event.MessageReactionCreate | event.MessageReactionDelete | event.MessageReactionDeleteAll | event.MessageReactionDeleteEmoji
	case GuildMessageTyping:
		flags = event.TypingStart
	case GuildMessages:
		flags = event.MessageCreate | event.MessageUpdate | event.MessageDelete | event.MessageDeleteBulk
	case GuildPresences:
		flags = event.PresenceUpdate
	case GuildVoiceStates:
		flags = event.VoiceStateUpdate
	case GuildWebhooks:
		flags = event.WebhooksUpdate
	case Guilds:
		flags = event.GuildCreate | event.GuildUpdate | event.GuildDelete | event.GuildRoleCreate | event.GuildRoleUpdate | event.GuildRoleDelete | event.ChannelCreate | event.ChannelUpdate | event.ChannelDelete | event.ChannelPinsUpdate | event.ThreadCreate | event.ThreadUpdate | event.ThreadDelete | event.ThreadListSync | event.ThreadMemberUpdate | event.ThreadMembersUpdate
	}
	return flags
}

func All() Flag {
	return DirectMessageReactions | DirectMessageTyping | DirectMessages | GuildBans | GuildEmojis | GuildIntegrations | GuildInvites | GuildMembers | GuildMessageReactions | GuildMessageTyping | GuildMessages | GuildPresences | GuildVoiceStates | GuildWebhooks | Guilds | 0
}

func EventsToIntents(eventFlags event.Flag, dm bool) (Flag, error) {
	if eventFlags.Size() == 0 {
		return 0, errors.New("must be at least one event flag")
	}

	var intent Flag
	if (eventFlags & GuildBans.EventFlags()) > 0 {
		intent |= GuildBans
	}
	if (eventFlags & GuildEmojis.EventFlags()) > 0 {
		intent |= GuildEmojis
	}
	if (eventFlags & GuildIntegrations.EventFlags()) > 0 {
		intent |= GuildIntegrations
	}
	if (eventFlags & GuildInvites.EventFlags()) > 0 {
		intent |= GuildInvites
	}
	if (eventFlags & GuildMembers.EventFlags()) > 0 {
		intent |= GuildMembers
	}
	if (eventFlags & GuildMessageReactions.EventFlags()) > 0 {
		intent |= GuildMessageReactions
	}
	if (eventFlags & GuildMessageTyping.EventFlags()) > 0 {
		intent |= GuildMessageTyping
	}
	if (eventFlags & GuildMessages.EventFlags()) > 0 {
		intent |= GuildMessages
	}
	if (eventFlags & GuildPresences.EventFlags()) > 0 {
		intent |= GuildPresences
	}
	if (eventFlags & GuildVoiceStates.EventFlags()) > 0 {
		intent |= GuildVoiceStates
	}
	if (eventFlags & GuildWebhooks.EventFlags()) > 0 {
		intent |= GuildWebhooks
	}
	if (eventFlags & Guilds.EventFlags()) > 0 {
		intent |= Guilds
	}

	if dm {
		if (eventFlags & DirectMessageReactions.EventFlags()) > 0 {
			intent |= DirectMessageReactions
		}
		if (eventFlags & DirectMessageTyping.EventFlags()) > 0 {
			intent |= DirectMessageTyping
		}
		if (eventFlags & DirectMessages.EventFlags()) > 0 {
			intent |= DirectMessages
		}
	}

	return intent, nil
}
