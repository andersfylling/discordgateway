package event

// Code generated - This file has been automatically generated by internal/generate/events/main.go - DO NOT EDIT.
// Warning: This file is overwritten at "go generate", instead adapt internal/constants/events.go and run go generate

import "fmt"
import "errors"
import "math/bits"

type UnsupportedErr struct{
    UnsupportedFlags Flag
    SupportedFlags Flag
}

func (err *UnsupportedErr) Error() string {
    return "unsupported events were detected: 0x" + fmt.Sprintf("%X", uint64(err.UnsupportedFlags))
}

type Flag uint64

func (f Flag) Size() int {
    return bits.OnesCount64(uint64(f))
}

// String discord string value for event. Panics if flag is not a singular event
func (f Flag) String() string {
    str, err := String(f)
    if err != nil {
        panic(err)
    }
    return str
}

// list off all {{ len . }} discord events
const (
    _ Flag = 0b1 << iota

{{- range .}}
    {{- if .IsDiscordEvent }}
        // {{.RenderDocs}}
        {{.}}

    {{end}}
{{- end}}
)

const (
{{- range .}}
    {{- if .IsDiscordEvent }}
        {{.LowerCaseFirst}}String = {{.Val}}
    {{- end}}
{{- end}}
)

func All() Flag {
    return {{- range .}}{{- if .IsDiscordEvent }} {{.}} | {{- end}} {{- end}} 0
}

func String(flags Flag) (string, error) {
    nrOfFlags := flags.Size()
    if nrOfFlags == 0 {
        return "", errors.New("must be at least one event flag")
    }
    if nrOfFlags > 1 {
        return "", errors.New("can only name one event flag")
    }

    var name string
    switch flags {
    {{- range .}}
    {{- if .IsDiscordEvent }}
    case {{.}}: name = {{.LowerCaseFirst}}String
    {{- end}}
    {{- end}}
    default:
        return "", errors.New("unknown event flag")
    }
    return name, nil
}

func StringToEvent(e string) (flag Flag, err error) {
    switch e {
    {{- range .}}
    {{- if .IsDiscordEvent }}
    case {{.LowerCaseFirst}}String: flag = {{.}}
    {{- end}}
    {{- end}}
    default:
        return 0, errors.New("unknown event string")
    }
    return flag, nil
}

func Strings(flags Flag) (names []string, err error) {
    if flags.Size() == 0 {
        return nil, errors.New("must be at least one event flag")
    }

    for i := 0; i < int(All()); i = i << 1 {
        v := ((flags >> i) & 0b1) << i
        if v == 0 {
            continue
        }

        name, err := String(v)
        if err != nil {
            return nil, err
        }
        names = append(names, name)
    }
    return names, nil
}