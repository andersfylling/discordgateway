package event

// Code generated - This file has been automatically generated by internal/generate/events/main.go - DO NOT EDIT.
// Warning: This file is overwritten at "go generate", instead adapt internal/constants/events.go and run go generate

import "fmt"
import "errors"
import "strings"
import "math/bits"

type UnsupportedErr struct {
	UnsupportedFlags Flag
	SupportedFlags   Flag
}

func (err *UnsupportedErr) Error() string {
	return "unsupported events were detected: 0x" + fmt.Sprintf("%X", uint64(err.UnsupportedFlags))
}

type Flag uint64

func (f Flag) Size() int {
	return bits.OnesCount64(uint64(f))
}

// String discord string value for event. When multiple, the events are joined with | as a separator
// panics if no flags are defined
func (f Flag) String() string {
	strs, err := Strings(f)
	if err != nil {
		panic(err)
	}
	return strings.Join(strs, "|")
}

// list off all 52 discord events
const (
	_ Flag = 0b1 << iota
	// ApplicationCommandCreate new Slash Command was created
	ApplicationCommandCreate

	// ApplicationCommandDelete Slash Command was deleted
	ApplicationCommandDelete

	// ApplicationCommandUpdate Slash Command was updated
	ApplicationCommandUpdate

	// ChannelCreate new guild channel created
	ChannelCreate

	// ChannelDelete channel was deleted
	ChannelDelete

	// ChannelPinsUpdate Sent when a message is pinned or unpinned in a text channel. This is not sent when a pinned message is deleted.
	ChannelPinsUpdate

	// ChannelUpdate channel was updated
	ChannelUpdate

	// GuildBanCreate user was banned from a guild
	GuildBanCreate

	// GuildBanDelete user was unbanned from a guild
	GuildBanDelete

	// GuildCreate lazy-load for unavailable guild, guild became available, or user joined a new guild
	GuildCreate

	// GuildDelete guild became unavailable, or user left/was removed from a guild
	GuildDelete

	// GuildEmojisUpdate guild emojis were updated
	GuildEmojisUpdate

	// GuildIntegrationsUpdate Sent when a guild integration is updated.
	GuildIntegrationsUpdate

	// GuildMemberCreate Sent when a new user joins a guild. The inner payload is a guild member object with these extra fields:
	GuildMemberCreate

	// GuildMemberDelete Sent when a user is removed from a guild (leave/kick/ban).
	GuildMemberDelete

	// GuildMemberUpdate Sent when a guild member is updated.
	GuildMemberUpdate

	// GuildMembersChunk Sent in response to Gateway Request Guild Members.
	GuildMembersChunk

	// GuildRoleCreate Sent when a guild role is created.
	GuildRoleCreate

	// GuildRoleDelete Sent when a guild role is created.
	GuildRoleDelete

	// GuildRoleUpdate Sent when a guild role is created.
	GuildRoleUpdate

	// GuildUpdate guild was updated
	GuildUpdate

	// Hello defines the heartbeat interval
	Hello

	// IntegrationCreate guild integration was created
	IntegrationCreate

	// IntegrationDelete guild integration was deleted
	IntegrationDelete

	// IntegrationUpdate guild integration was updated
	IntegrationUpdate

	// InteractionCreate user used an interaction, such as a Slash Command
	InteractionCreate

	// InvalidSession failure response to Identify or Resume or invalid active session
	InvalidSession

	// InviteCreate	invite to a channel was created
	InviteCreate

	// InviteDelete	invite to a channel was deleted
	InviteDelete

	// MessageCreate message was created
	MessageCreate

	// MessageDelete message was deleted
	MessageDelete

	// MessageDeleteBulk multiple messages were deleted at once
	MessageDeleteBulk

	// MessageReactionCreate user reacted to a message
	MessageReactionCreate

	// MessageReactionDelete user removed a reaction from a message
	MessageReactionDelete

	// MessageReactionDeleteAll all reactions were explicitly removed from a message
	MessageReactionDeleteAll

	// MessageReactionDeleteEmoji all reactions for a given emoji were explicitly removed from a message
	MessageReactionDeleteEmoji

	// MessageUpdate message was edited
	MessageUpdate

	// PresenceUpdate user was updated
	PresenceUpdate

	// Ready contains the initial state information
	Ready

	// Reconnect server is going away, client should reconnect to gateway and resume
	Reconnect

	// Resumed response to Resume
	Resumed

	// ThreadCreate thread created, also sent when being added to a private thread
	ThreadCreate

	// ThreadDelete thread was deleted
	ThreadDelete

	// ThreadListSync sent when gaining access to a channel, contains all active threads in that channel
	ThreadListSync

	// ThreadMemberUpdate thread member for the current user was updated
	ThreadMemberUpdate

	// ThreadMembersUpdate some user(s) were added to or removed from a thread
	ThreadMembersUpdate

	// ThreadUpdate thread was updated
	ThreadUpdate

	// TypingStart user started typing in a channel
	TypingStart

	// UserUpdate properties about the user changed
	UserUpdate

	// VoiceServerUpdate guild's voice server was updated
	VoiceServerUpdate

	// VoiceStateUpdate someone joined, left, or moved a voice channel
	VoiceStateUpdate

	// WebhooksUpdate guild channel webhook was created, update, or deleted
	WebhooksUpdate
)

const (
	applicationCommandCreateString   = "APPLICATION_COMMAND_CREATE"
	applicationCommandDeleteString   = "APPLICATION_COMMAND_DELETE"
	applicationCommandUpdateString   = "APPLICATION_COMMAND_UPDATE"
	channelCreateString              = "CHANNEL_CREATE"
	channelDeleteString              = "CHANNEL_DELETE"
	channelPinsUpdateString          = "CHANNEL_PINS_UPDATE"
	channelUpdateString              = "CHANNEL_UPDATE"
	guildBanCreateString             = "GUILD_BAN_ADD"
	guildBanDeleteString             = "GUILD_BAN_REMOVE"
	guildCreateString                = "GUILD_CREATE"
	guildDeleteString                = "GUILD_DELETE"
	guildEmojisUpdateString          = "GUILD_EMOJIS_UPDATE"
	guildIntegrationsUpdateString    = "GUILD_INTEGRATIONS_UPDATE"
	guildMemberCreateString          = "GUILD_MEMBER_ADD"
	guildMemberDeleteString          = "GUILD_MEMBER_REMOVE"
	guildMemberUpdateString          = "GUILD_MEMBER_UPDATE"
	guildMembersChunkString          = "GUILD_MEMBERS_CHUNK"
	guildRoleCreateString            = "GUILD_ROLE_CREATE"
	guildRoleDeleteString            = "GUILD_ROLE_DELETE"
	guildRoleUpdateString            = "GUILD_ROLE_UPDATE"
	guildUpdateString                = "GUILD_UPDATE"
	helloString                      = "HELLO"
	integrationCreateString          = "INTEGRATION_CREATE"
	integrationDeleteString          = "INTEGRATION_DELETE"
	integrationUpdateString          = "INTEGRATION_UPDATE"
	interactionCreateString          = "INTERACTION_CREATE"
	invalidSessionString             = "INVALID_SESSION"
	inviteCreateString               = "INVITE_CREATE"
	inviteDeleteString               = "INVITE_DELETE"
	messageCreateString              = "MESSAGE_CREATE"
	messageDeleteString              = "MESSAGE_DELETE"
	messageDeleteBulkString          = "MESSAGE_DELETE_BULK"
	messageReactionCreateString      = "MESSAGE_REACTION_ADD"
	messageReactionDeleteString      = "MESSAGE_REACTION_REMOVE"
	messageReactionDeleteAllString   = "MESSAGE_REACTION_REMOVE_ALL"
	messageReactionDeleteEmojiString = "MESSAGE_REACTION_REMOVE_EMOJI"
	messageUpdateString              = "MESSAGE_UPDATE"
	presenceUpdateString             = "PRESENCE_UPDATE"
	readyString                      = "READY"
	reconnectString                  = "RECONNECT"
	resumedString                    = "RESUMED"
	threadCreateString               = "THREAD_CREATE"
	threadDeleteString               = "THREAD_DELETE"
	threadListSyncString             = "THREAD_LIST_SYNC"
	threadMemberUpdateString         = "THREAD_MEMBER_UPDATE"
	threadMembersUpdateString        = "THREAD_MEMBERS_UPDATE"
	threadUpdateString               = "THREAD_UPDATE"
	typingStartString                = "TYPING_START"
	userUpdateString                 = "USER_UPDATE"
	voiceServerUpdateString          = "VOICE_SERVER_UPDATE"
	voiceStateUpdateString           = "VOICE_STATE_UPDATE"
	webhooksUpdateString             = "WEBHOOKS_UPDATE"
)

func All() Flag {
	return ApplicationCommandCreate | ApplicationCommandDelete | ApplicationCommandUpdate | ChannelCreate | ChannelDelete | ChannelPinsUpdate | ChannelUpdate | GuildBanCreate | GuildBanDelete | GuildCreate | GuildDelete | GuildEmojisUpdate | GuildIntegrationsUpdate | GuildMemberCreate | GuildMemberDelete | GuildMemberUpdate | GuildMembersChunk | GuildRoleCreate | GuildRoleDelete | GuildRoleUpdate | GuildUpdate | Hello | IntegrationCreate | IntegrationDelete | IntegrationUpdate | InteractionCreate | InvalidSession | InviteCreate | InviteDelete | MessageCreate | MessageDelete | MessageDeleteBulk | MessageReactionCreate | MessageReactionDelete | MessageReactionDeleteAll | MessageReactionDeleteEmoji | MessageUpdate | PresenceUpdate | Ready | Reconnect | Resumed | ThreadCreate | ThreadDelete | ThreadListSync | ThreadMemberUpdate | ThreadMembersUpdate | ThreadUpdate | TypingStart | UserUpdate | VoiceServerUpdate | VoiceStateUpdate | WebhooksUpdate | 0
}

func String(flags Flag) (string, error) {
	nrOfFlags := flags.Size()
	if nrOfFlags == 0 {
		return "", errors.New("must be at least one event flag")
	}
	if nrOfFlags > 1 {
		return "", errors.New("can only name one event flag")
	}

	var name string
	switch flags {
	case ApplicationCommandCreate:
		name = applicationCommandCreateString
	case ApplicationCommandDelete:
		name = applicationCommandDeleteString
	case ApplicationCommandUpdate:
		name = applicationCommandUpdateString
	case ChannelCreate:
		name = channelCreateString
	case ChannelDelete:
		name = channelDeleteString
	case ChannelPinsUpdate:
		name = channelPinsUpdateString
	case ChannelUpdate:
		name = channelUpdateString
	case GuildBanCreate:
		name = guildBanCreateString
	case GuildBanDelete:
		name = guildBanDeleteString
	case GuildCreate:
		name = guildCreateString
	case GuildDelete:
		name = guildDeleteString
	case GuildEmojisUpdate:
		name = guildEmojisUpdateString
	case GuildIntegrationsUpdate:
		name = guildIntegrationsUpdateString
	case GuildMemberCreate:
		name = guildMemberCreateString
	case GuildMemberDelete:
		name = guildMemberDeleteString
	case GuildMemberUpdate:
		name = guildMemberUpdateString
	case GuildMembersChunk:
		name = guildMembersChunkString
	case GuildRoleCreate:
		name = guildRoleCreateString
	case GuildRoleDelete:
		name = guildRoleDeleteString
	case GuildRoleUpdate:
		name = guildRoleUpdateString
	case GuildUpdate:
		name = guildUpdateString
	case Hello:
		name = helloString
	case IntegrationCreate:
		name = integrationCreateString
	case IntegrationDelete:
		name = integrationDeleteString
	case IntegrationUpdate:
		name = integrationUpdateString
	case InteractionCreate:
		name = interactionCreateString
	case InvalidSession:
		name = invalidSessionString
	case InviteCreate:
		name = inviteCreateString
	case InviteDelete:
		name = inviteDeleteString
	case MessageCreate:
		name = messageCreateString
	case MessageDelete:
		name = messageDeleteString
	case MessageDeleteBulk:
		name = messageDeleteBulkString
	case MessageReactionCreate:
		name = messageReactionCreateString
	case MessageReactionDelete:
		name = messageReactionDeleteString
	case MessageReactionDeleteAll:
		name = messageReactionDeleteAllString
	case MessageReactionDeleteEmoji:
		name = messageReactionDeleteEmojiString
	case MessageUpdate:
		name = messageUpdateString
	case PresenceUpdate:
		name = presenceUpdateString
	case Ready:
		name = readyString
	case Reconnect:
		name = reconnectString
	case Resumed:
		name = resumedString
	case ThreadCreate:
		name = threadCreateString
	case ThreadDelete:
		name = threadDeleteString
	case ThreadListSync:
		name = threadListSyncString
	case ThreadMemberUpdate:
		name = threadMemberUpdateString
	case ThreadMembersUpdate:
		name = threadMembersUpdateString
	case ThreadUpdate:
		name = threadUpdateString
	case TypingStart:
		name = typingStartString
	case UserUpdate:
		name = userUpdateString
	case VoiceServerUpdate:
		name = voiceServerUpdateString
	case VoiceStateUpdate:
		name = voiceStateUpdateString
	case WebhooksUpdate:
		name = webhooksUpdateString
	default:
		return "", errors.New("unknown event flag")
	}
	return name, nil
}

func StringToEvent(e string) (flag Flag, err error) {
	switch e {
	case applicationCommandCreateString:
		flag = ApplicationCommandCreate
	case applicationCommandDeleteString:
		flag = ApplicationCommandDelete
	case applicationCommandUpdateString:
		flag = ApplicationCommandUpdate
	case channelCreateString:
		flag = ChannelCreate
	case channelDeleteString:
		flag = ChannelDelete
	case channelPinsUpdateString:
		flag = ChannelPinsUpdate
	case channelUpdateString:
		flag = ChannelUpdate
	case guildBanCreateString:
		flag = GuildBanCreate
	case guildBanDeleteString:
		flag = GuildBanDelete
	case guildCreateString:
		flag = GuildCreate
	case guildDeleteString:
		flag = GuildDelete
	case guildEmojisUpdateString:
		flag = GuildEmojisUpdate
	case guildIntegrationsUpdateString:
		flag = GuildIntegrationsUpdate
	case guildMemberCreateString:
		flag = GuildMemberCreate
	case guildMemberDeleteString:
		flag = GuildMemberDelete
	case guildMemberUpdateString:
		flag = GuildMemberUpdate
	case guildMembersChunkString:
		flag = GuildMembersChunk
	case guildRoleCreateString:
		flag = GuildRoleCreate
	case guildRoleDeleteString:
		flag = GuildRoleDelete
	case guildRoleUpdateString:
		flag = GuildRoleUpdate
	case guildUpdateString:
		flag = GuildUpdate
	case helloString:
		flag = Hello
	case integrationCreateString:
		flag = IntegrationCreate
	case integrationDeleteString:
		flag = IntegrationDelete
	case integrationUpdateString:
		flag = IntegrationUpdate
	case interactionCreateString:
		flag = InteractionCreate
	case invalidSessionString:
		flag = InvalidSession
	case inviteCreateString:
		flag = InviteCreate
	case inviteDeleteString:
		flag = InviteDelete
	case messageCreateString:
		flag = MessageCreate
	case messageDeleteString:
		flag = MessageDelete
	case messageDeleteBulkString:
		flag = MessageDeleteBulk
	case messageReactionCreateString:
		flag = MessageReactionCreate
	case messageReactionDeleteString:
		flag = MessageReactionDelete
	case messageReactionDeleteAllString:
		flag = MessageReactionDeleteAll
	case messageReactionDeleteEmojiString:
		flag = MessageReactionDeleteEmoji
	case messageUpdateString:
		flag = MessageUpdate
	case presenceUpdateString:
		flag = PresenceUpdate
	case readyString:
		flag = Ready
	case reconnectString:
		flag = Reconnect
	case resumedString:
		flag = Resumed
	case threadCreateString:
		flag = ThreadCreate
	case threadDeleteString:
		flag = ThreadDelete
	case threadListSyncString:
		flag = ThreadListSync
	case threadMemberUpdateString:
		flag = ThreadMemberUpdate
	case threadMembersUpdateString:
		flag = ThreadMembersUpdate
	case threadUpdateString:
		flag = ThreadUpdate
	case typingStartString:
		flag = TypingStart
	case userUpdateString:
		flag = UserUpdate
	case voiceServerUpdateString:
		flag = VoiceServerUpdate
	case voiceStateUpdateString:
		flag = VoiceStateUpdate
	case webhooksUpdateString:
		flag = WebhooksUpdate
	default:
		return 0, errors.New("unknown event string")
	}
	return flag, nil
}

func Strings(flags Flag) (names []string, err error) {
	if flags.Size() == 0 {
		return nil, errors.New("must be at least one event flag")
	}

	for i := 0; i < int(All()); i = i << 1 {
		v := ((flags >> i) & 0b1) << i
		if v == 0 {
			continue
		}

		name, err := String(v)
		if err != nil {
			return nil, err
		}
		names = append(names, name)
	}
	return names, nil
}
